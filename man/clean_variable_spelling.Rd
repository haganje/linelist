% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clean_variable_spelling.R
\name{clean_variable_spelling}
\alias{clean_variable_spelling}
\title{Check and clean spelling or codes of multiple variables in a data frame}
\usage{
clean_variable_spelling(x = data.frame(), wordlists = list(),
  group = NULL, sort_by = NULL, classes = NULL)
}
\arguments{
\item{x}{a \code{data.frame}}

\item{wordlists}{a data frame with at least two columns defining the word
list to be used. This data frame should have a \code{group} column, ideally (see below).}

\item{group}{a character if \code{wordlists} is a data frame, this defines the column
to be used for splitting the data frame into groups.}

\item{sort_by}{a character the column to be used for sorting the values in each data frame}

\item{classes}{a vector of class definitions for each of the columns. If this
is not provided, the classes will be read from the columns themselves.
Practically, this is used in \code{\link[=clean_data]{clean_data()}} to mark columns as protected.}
}
\value{
a data frame with re-defined data based on the dictionary
}
\description{
Check and clean spelling or codes of multiple variables in a data frame
}
\note{
This function will only parse character and factor columns to protect
numeric and Date columns from conversion to character. While it is possible,
it is not recommended to use a dictionary without a grouping column
specifying the columns in the data to work on.
}
\examples{

# Set up wordlist ------------------------------------------------ 
yesno <- c("Y", "N", "U", NA)
dyesno <- c("Yes", "No", "Unknown", "missing")
treatment_administered <- c(0:1, NA)
dtreatment_administered <- c("Yes", "No", "missing")
facility <- 1:10
dfacility <- sprintf("Facility \%s", format(1:10))
age_group <- c(0, 10, 20, 30, 40, 50)
dage_group <- c("0-9", "10-19", "20-29", "30-39", "40-49", "50+")

wordlist <- data.frame(
  options = c(yesno, treatment_administered, facility, age_group),
  values  = c(dyesno, dtreatment_administered, dfacility, dage_group),
  orders  = c(1:4, 1:3, 1:10, 1:6),
  stringsAsFactors = FALSE
)
wordlist$grp <- rep(c("readmission", "treatment_administered", "facility", "age_group"),
                c(4, 3, 10, 6))

# Generate example data ------------------------------------------
dat <- data.frame(
  readmission = sample(yesno, 50, replace = TRUE),
  treatment_administered = sample(treatment_administered, 50, replace = TRUE),
  facility = sample(facility, 50, replace = TRUE),
  age_group = sample(age_group, 50, replace = TRUE),
  stringsAsFactors = FALSE
)

# Clean spelling based on wordlist ------------------------------ 
wordlist # show the wordlist
head(dat) # show the data

head(clean_variable_spelling(dat, wordlists = wordlist, group = "grp"))

# You can ensure the order of the factors are correct by specifying 
# a column that defines order.
dat[] <- lapply(dat, as.factor)
as.list(head(dat))
res <- clean_variable_spelling(dat, wordlists = wordlist, group = "grp", sort_by = "orders")
head(res)
as.list(head(res))
}
\author{
Zhian N. Kamvar
}
