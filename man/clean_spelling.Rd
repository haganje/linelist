% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clean_spelling.R
\name{clean_spelling}
\alias{clean_spelling}
\title{Rename values in a vector based on a wordlist}
\usage{
clean_spelling(x = character(), wordlist = data.frame(),
  quiet = FALSE)
}
\arguments{
\item{x}{a character or factor vector}

\item{wordlist}{a two-column matrix or data frame defining mis-spelled
words in the first column and replacements in the second column. There
are keywords that can be appended to the first column for cleaning missing
or default values.}

\item{quiet}{a \code{logical} indicating if warnings should be issued if no
replacement is made; if \code{FALSE}, these warnings will be disabled}
}
\value{
a vector of the same type as \code{x} with mis-spelled labels cleaned.
Note that factors will be arranged by the order presented in the data
wordlist; other levels will appear afterwards.
}
\description{
This function provides an interface for \code{\link[forcats:fct_recode]{forcats::fct_recode()}},
\code{\link[forcats:fct_explicit_na]{forcats::fct_explicit_na()}}, and \code{\link[forcats:fct_relevel]{forcats::fct_relevel()}} in such a way that
a data wordlist can be imported from a data frame.
}
\details{
\subsection{Keywords}{

There are currently two keywords that can be placed in the first column of
your wordlist:
\itemize{
\item \code{.missing}: replaces any missing values
\item \code{.default}: replaces \strong{ALL} values that are not defined in the wordlist
and are not missing.
}

The \code{.missing} keyword is a synonym for \code{NA} (a \emph{true} missing value). This
succinctly handles two potentially confusing situations:
\enumerate{
\item You've imported your wordlist from excel and all the missing values
(\code{NA}) render as \code{"NA"}.
\item You actually want to represent "NA" as a potential value, but you've
accidentally imported it as a missing value (\code{NA})
}

A warning will appear if you specify either \code{NA} or \code{"NA"} in your wordlist
without the \code{.missing} argument.
}
}
\examples{

corrections <- data.frame(
  bad = c("foubar", "foobr", "fubar", "unknown", NA), 
  good = c("foobar", "foobar", "foobar", "missing", "missing"),
  stringsAsFactors = FALSE
)
corrections

# create some fake data
my_data <- c(letters[1:5], sample(corrections$bad[-5], 10, replace = TRUE))
my_data[sample(6:15, 2)] <- NA  # with missing elements

clean_spelling(my_data, corrections)

# You can also set a default value
corrections_with_default <- rbind(corrections, c(bad = ".default", good = "unknown"))
corrections_with_default
clean_spelling(my_data, corrections_with_default)

# The function will give you a warning if the wordlist does not
# match the data
clean_spelling(letters, corrections)

# The can be used for translating survey output

words <- data.frame(
  option_code = c("Y", "N", "U", NA),
  option_name = c("Yes", "No", "Unknown", "Missing"),
  stringsAsFactors = FALSE
)
clean_spelling(c("Y", "Y", NA, "N", "U", "U", "N"), words)

}
\seealso{
\code{\link[=clean_variable_spelling]{clean_variable_spelling()}} for an implementation that acts across
multiple variables in a data frame.
}
\author{
Zhian N. Kamvar
}
